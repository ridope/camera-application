
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_SDRAM_RTL_Test(

	//////////// CLOCK //////////
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// GPIO, GPIO connect to D5M - 5M Pixel Camera //////////
	input		    [11:0]		D5M_D,
	input		          		D5M_FVAL,
	input		          		D5M_LVAL,
	input		          		D5M_PIXLCLK,
	output		          	D5M_RESET_N,
	output		          	D5M_SCLK,
	inout		          		D5M_SDATA,
	input		          		D5M_STROBE,
	output		          	D5M_TRIGGER,
	output		          	D5M_XCLKIN
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire	[15:0]	Read_DATA;

wire	[11:0]	mCCD_DATA;
wire				mCCD_DVAL;
wire				mCCD_DVAL_d;
wire	[15:0]	X_Cont;
wire	[15:0]	Y_Cont;
wire	[9:0]		X_ADDR;
wire	[31:0]	Frame_Cont;
wire				DLY_RST_0;
wire				DLY_RST_1;
wire				DLY_RST_2;
wire				DLY_RST_3;
wire				DLY_RST_4;
wire				Read;
reg	[11:0]	rCCD_DATA;
reg				rCCD_LVAL;
reg				rCCD_FVAL;
wire	[11:0]	sCCD_R;
wire	[11:0]	sCCD_G;
wire	[11:0]	sCCD_B;
wire				sCCD_DVAL;

wire				sdram_ctrl_clk;
wire	[3:0]		oVGA_R;   				//	VGA Red[3:0]
wire	[3:0]		oVGA_G;	 				//	VGA Green[3:0]
wire	[3:0]		oVGA_B;   				//	VGA Blue[3:0]

//power on start
wire             auto_start;

//=======================================================
//  Structural coding
//=======================================================
// D5M
assign	D5M_TRIGGER	=	1'b1;  // tRIGGER
assign	D5M_RESET_N	=	DLY_RST_1;
assign   VGA_CTRL_CLK = ~VGA_CLK;

assign	LEDR		=	SW;
assign	LEDG		=	Y_Cont;

//fetch the high 4 bits
assign  VGA_R = oVGA_R[3:0];
assign  VGA_G = oVGA_G[3:0];
assign  VGA_B = oVGA_B[3:0];

//D5M read 
always@(posedge D5M_PIXLCLK)
begin
	rCCD_DATA	<=	D5M_D;
	rCCD_LVAL	<=	D5M_LVAL;
	rCCD_FVAL	<=	D5M_FVAL;
end

//auto start when power on
assign auto_start = ((KEY[0])&&(DLY_RST_3)&&(!DLY_RST_4))? 1'b1:1'b0;

//	SDRAM frame buffer - Change the Data read and write
Sdram_Control	u1	(	//	HOST Side
						   .REF_CLK(MAX10_CLK1_50),
					      .RESET_N(1'b1),
							//	FIFO Write Side 
						   .WR_DATA({4'b0000,sCCD_R[7:4], sCCD_G[7:4],sCCD_B[7:4]}),
							.WR(sCCD_DVAL),
							.WR_ADDR(0),
							.WR_MAX_ADDR(640*480),		//	
							.WR_LENGTH(9'h80),
							.WR_LOAD(!DLY_RST_0),
							.WR_CLK(D5M_PIXLCLK),
							//	FIFO Read Side 
						   .RD_DATA(Read_DATA),
				        	.RD(Read),
				        	.RD_ADDR(0),			//	Read odd field and bypass blanking
							.RD_MAX_ADDR(640*480),
							.RD_LENGTH(9'h80),
				        	.RD_LOAD(!DLY_RST_0),
							.RD_CLK(~VGA_CTRL_CLK),
                     //	SDRAM Side
						   .SA(DRAM_ADDR),
						   .BA(DRAM_BA),
						   .CS_N(DRAM_CS_N),
						   .CKE(DRAM_CKE),
						   .RAS_N(DRAM_RAS_N),
				         .CAS_N(DRAM_CAS_N),
				         .WE_N(DRAM_WE_N),
						   .DQ(DRAM_DQ),
				         .DQM({DRAM_UDQM,DRAM_LDQM}),
							.SDR_CLK(DRAM_CLK)	
							);

//Reset module
Reset_Delay			u2	(	.iCLK(MAX10_CLK2_50),
							.iRST(KEY[0]),
							.oRST_0(DLY_RST_0),
							.oRST_1(DLY_RST_1),
							.oRST_2(DLY_RST_2),
							.oRST_3(DLY_RST_3),
							.oRST_4(DLY_RST_4)
						);
						
						
//D5M image capture
CCD_Capture			u3	(	.oDATA(mCCD_DATA),
							.oDVAL(mCCD_DVAL),
							.oX_Cont(X_Cont),
							.oY_Cont(Y_Cont),
							.oFrame_Cont(Frame_Cont),
							.iDATA(rCCD_DATA),
							.iFVAL(rCCD_FVAL),
							.iLVAL(rCCD_LVAL),
							.iSTART(!SW[1]|auto_start),
							.iEND(!SW[0]),
							.iCLK(~D5M_PIXLCLK),
							.iRST(DLY_RST_2)
						);
						
						
//D5M raw date convert to RGB data
RAW2RGB				u4	(	.iCLK(D5M_PIXLCLK),
							.iRST(DLY_RST_1),
							.iDATA(mCCD_DATA),
							.iDVAL(mCCD_DVAL),
							.oRed(sCCD_R),
							.oGreen(sCCD_G),
							.oBlue(sCCD_B),
							.oDVAL(sCCD_DVAL),
							.iX_Cont(X_Cont),
							.iY_Cont(Y_Cont)
						);

						
pll_test u5(
	.areset(),
	.inclk0(MAX10_CLK2_50),
	.c0(clk_test),
	.c2(D5M_XCLKIN),
	.c3(VGA_CLK),
	.locked()
	);

//Frame count display
SEG7_LUT_8 			u6	(	.oSEG0(HEX0),.oSEG1(HEX1),
							.oSEG2(HEX2),.oSEG3(HEX3),
							.oSEG4(HEX4),.oSEG5(HEX5),
							.iDIG(Frame_Cont[23:0])
						);
	
//D5M I2C control
I2C_CCD_Config 		u7	(	//	Host Side
							.iCLK(MAX10_CLK2_50),
							.iRST_N(DLY_RST_2),
							.iEXPOSURE_ADJ(SW[2]),
							.iEXPOSURE_DEC_p(SW[3]),
							.iZOOM_MODE_SW(SW[9]),
							//	I2C Side
							.I2C_SCLK(D5M_SCLK),
							.I2C_SDAT(D5M_SDATA)
						);
																 
VGA_Controller		u8	(	//	Host Side
							.oRequest   (Read),
							 .iRed(Read_DATA[11:8]),
							 .iGreen(Read_DATA[7:4]),
							 .iBlue(Read_DATA[3:0]),
							//	VGA Side
							.oVGA_R     (oVGA_R),
							.oVGA_G     (oVGA_G),
							.oVGA_B     (oVGA_B),
							.oVGA_H_SYNC(VGA_HS),
							.oVGA_V_SYNC(VGA_VS),
							//	Control Signal
							.iVGA_CLK   (VGA_CTRL_CLK),
							.iRST_n     (DLY_RST_2)
						);

endmodule
